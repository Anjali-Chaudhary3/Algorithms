PROBLEM-
You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 SOLUTION-
 class Solution {
public:
    int maxChunksToSorted(vector<int>& arr) {
        
        int n = arr.size();
        
        int count = 0;
        
        // left_max will store the maximum index till which this chunk will be valid
        
        int left_max = 0;
        
        for(int i = 0; i < n; i++)
        {
            // update left_max
            
            left_max = max(left_max, arr[i]);
            
            // if the correct place is found then increment the count of chunks
            
            if(left_max == i)
                count++;
        }
        
        return count;
    }
};
PROBLEM LINK-
https://leetcode.com/problems/max-chunks-to-make-sorted/
